---
# Requires: Ansible 2.2 (due to check_mode and timezone)
- hosts: all
  user: root
  tasks:
    - name: Cosmos Firewall Rule
      firewalld:
        port: "{{ serviceport }}/tcp"
        permanent: true
        state: enabled
        immediate: yes

    - name: Touch relevant files
      file:
        dest: "{{ item }}"
        state: touch
      with_items:
        - /root/.{{ prefix }}cosmos.env
        - /root/.{{ prefix }}cosmos.env.sh
      when: envvar != []

    - name: Create empty environment
      copy:
        mode: 0600
        dest: /root/{{ prefix }}.cosmos.env
        content: ""
      when: envvar  == []

    - name: Configure COSMOS User environment add or append
      lineinfile:
        dest: /root/.{{ prefix }}cosmos.env
        regexp: ".*{{ item }}.*"
        line: "{{ item }}"
        state: present
      with_items:
        - "{{ envvar }}"
      when: envvar != []

    - name: Configure COSMOS User environment
      replace:
        dest: /root/.{{ prefix }}cosmos.env
        regexp: ".*{{ item }}.*"
        replace: "{{ item }}"
      with_items:
        - "{{ envvar }}"
      when: envvar != []

    - name: Create empty environment for BASH
      copy:
        mode: 0600
        dest: /root/{{ prefix }}.cosmos.env.sh
        content: ""
      when: envvar  == []

    - name: Configure COSMOS User environment for BASH add or append
      lineinfile:
        dest: /root/.{{ prefix }}cosmos.env.sh
        regexp: "^.*{{ item }}.*"
        line: "export {{ item }}"
        state: present
      with_items:
        - "{{ envvar }}"
      when: envvar != []

    - name: Configure COSMOS User environment for BASH
      replace:
        dest: /root/.{{ prefix }}cosmos.env.sh
        regexp: "^.*{{ item }}.*"
        replace: "export {{ item }}"
      with_items:
        - "{{ envvar }}"
      when: envvar != []

    - name: Configure User environment to load cosmos User Environment
      lineinfile:
        dest: /root/.bashrc
        create: true
        state: present
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: "^source /root/{{ prefix }}.cosmos.env.sh", line: "source /root/{{ prefix }}.cosmos.env.sh" }

    - name: Remove Unit file
      file:
        dest: "/etc/systemd/system/{{ prefix }}cosmovisor.service"
        state: absent
      register: systemdrestart
      when: systemdfile == false

    - name: Create Unit file
      copy:
        dest: "/etc/systemd/system/{{ prefix }}cosmovisor.service"
        content: |
          [Unit]
          Description={{ prefix }}Cosmovisor
          After=network.target

          [Service]
          User=root
          Type=simple
          EnvironmentFile=/root/.{{ prefix }}cosmos.env
          {% if workingdir != False %}
          WorkingDirectory={{ workingdir }}
          {% endif %}
          {% if customcommand != False %}
          ExecStart={{ customcommand }}
          {% else %}
          {% if cosmovisor != True %}
          ExecStart={{ chaincommand }} start {{ extrabin }}
          {% else %}
          ExecStart=/root/go/bin/cosmovisor start {{ extrabin }}
          {% endif %}
          {% endif %}
          Restart=on-failure
          RestartSec=30
          StartLimitInterval=350
          StartLimitBurst=10
          LimitNOFILE=infinity

          [Install]
          WantedBy=multi-user.target
      register: systemdrestart
      when: systemdfile == true

    - name: Reload systemd when required
      shell: systemctl daemon-reload
      when: systemdrestart.changed

    - name: Disable service
      service: name={{ item }} enabled=no state=stopped
      with_items:
        - "{{ prefix }}cosmovisor"
      when: systemdfile != true
      ignore_errors: true

    - name: Enable service
      service: name={{ item }} enabled=yes state=started
      with_items:
        - "{{ prefix }}cosmovisor"
      when: systemdfile == true

    - name: Remove noti-port.sh with variables
      file:
        dest: "/root/go/bin/noti-{{ prefix }}port.sh"
        state: absent
      when: createcommands != True or monit != True

    - name: Create noti-port.sh with variables
      copy:
        dest: "/root/go/bin/noti-{{ prefix }}port.sh"
        mode: 0755
        content: |
          #!/usr/bin/env bash
          export NOTI_TELEGRAM_TOKEN={{ telegramtoken }}
          export NOTI_TELEGRAM_CHATID={{ telegramchatid }}
          echo "üö® Cosmos PORT failed at `hostname`" | /root/go/bin/noti -g -m -
      when: createcommands == True and monit == True

    - name: Remove monit cosmos port monitoring
      file:
        dest: "{{ monitpath }}/{{ prefix }}cosmos"
        state: absent
      register: cosmos2
      when: createcommands != True or monit != True or validator != True

    - name: Create monit cosmos port monitoring (without restart)
      copy:
        dest: "{{ monitpath }}/{{ prefix }}cosmos"
        content: |
          check host {{ prefix }}Validator with address 127.0.0.1
              if failed port {{ serviceport }} type tcp then alert
              if failed port {{ serviceport }} type tcp then exec "/root/go/bin/noti-{{ prefix }}port.sh"
                repeat every 1 cycles

      register: cosmos1
      when: systemdfile == false and createcommands == True and monit == True and validator == True

    - name: Create monit cosmos port monitoring (with restart)
      copy:
        dest: "{{ monitpath }}/{{ prefix }}cosmos"
        content: |
          check host {{ prefix }}Validator with address 127.0.0.1
              start program = "/usr/bin/systemctl start {{ prefix }}cosmovisor"
                  as uid root and gid root
              stop program = "/usr/bin/systemctl stop {{ prefix }}cosmovisor"
              if failed port {{ serviceport }} type tcp then restart
              if failed port {{ serviceport }} type tcp then exec "/root/go/bin/noti-{{ prefix }}port.sh"
                repeat every 1 cycles

      register: cosmos2
      when: systemdfile != false and createcommands == True and monit == True and validator == True

    - name: Remove noti-bond.sh with variables
      file:
        dest: "/root/go/bin/noti-{{ prefix }}bond.sh"
        state: absent
      when: createcommands != True or monit != True or validator != True

    - name: Create noti-bond.sh with variables
      copy:
        dest: "/root/go/bin/noti-{{ prefix }}bond.sh"
        mode: 0755
        content: |
          #!/usr/bin/env bash
          export NOTI_TELEGRAM_TOKEN={{ telegramtoken }}
          export NOTI_TELEGRAM_CHATID={{ telegramchatid }}
          echo "üö® Cosmos BONDING failed at `hostname`" | /root/go/bin/noti -g -m -
      when: createcommands == True and monit == True and validator == True

    - name: Remove monit cosmos bond monitoring
      file:
        dest: "{{ monitpath }}/{{ prefix }}validator"
        state: absent
      register: cosmos3
      when: createcommands != True or monit != True or validator != True

    - name: Create monit cosmos bonding monitoring
      copy:
        dest: "{{ monitpath }}/{{ prefix }}validator"
        content: |
          check program {{ prefix }}ValidatorStatus with path "/root/{{ prefix }}query-node-status"
              if status > 0 then alert
              if status > 0  then exec "/root/go/bin/noti-{{ prefix }}bond.sh"
                repeat every 1 cycles
      when: createcommands == True and monit == True and validator == True
      register: cosmos3

    - name: Remove noti-service.sh with variables
      file:
        dest: "/root/go/bin/noti-{{ prefix }}service.sh"
        state: absent
      when: createcommands != True or monit != True

    - name: Create noti-service.sh with variables
      copy:
        dest: "/root/go/bin/noti-{{ prefix }}service.sh"
        mode: 0755
        content: |
          #!/usr/bin/env bash
          export NOTI_TELEGRAM_TOKEN={{ telegramtoken }}
          export NOTI_TELEGRAM_CHATID={{ telegramchatid }}
          echo "üñ•Ô∏è Cosmos PROCESS {{ chaincommand }} failed at `hostname`" | /root/go/bin/noti -g -m -
      when: createcommands == True and monit == True

    - name: Remove monit cosmos bond monitoring
      file:
        dest: "{{ monitpath }}/{{ prefix }}cosmovisor"
        state: absent
      register: cosmos4
      when: createcommands != True or monit != True or validator != True      or systemdfile != True

    - name: Create monit cosmos service guard
      copy:
        dest: "{{ monitpath }}/{{ prefix }}cosmovisor"
        content: |
          check process {{ prefix }}cosmovisor matching {% if cosmovisor == True %}'/root/go/bin/cosmovisor'{% else %}'{{ chaincommand }}'{% endif %}
              start program = "/usr/bin/systemctl start {{ prefix }}cosmovisor"
                  as uid root and gid root
              stop program = "/usr/bin/systemctl stop {{ prefix }}cosmovisor"
              if not exist then restart
              if not exist then exec  "/root/go/bin/noti-{{ prefix }}service.sh"
                repeat every 1 cycles
      when: systemdfile == true and createcommands == True and monit == True
      register: cosmos4

    # Additional monitoring for other hosts in the playbook

    - name: Delete noti-{{ hostvars[item].prefix }}host-{{item}}.sh when there's no monitoring
      file:
        name: "/root/go/bin/noti-{{ hostvars[item].prefix }}host-{{item}}.sh"
        state: absent
      with_inventory_hostnames:
        - all
      when: monit == True and hostvars[item].monit == False

    - name: Create noti-{{ prefix }}host-{{item}}.sh with variables
      copy:
        dest: "/root/go/bin/noti-{{ prefix }}host-{{item}}.sh"
        mode: 0755
        content: |
          #!/usr/bin/env bash
          export NOTI_TELEGRAM_TOKEN={{ hostvars[item].telegramtoken }}
          export NOTI_TELEGRAM_CHATID={{ hostvars[item].telegramchatid }}
          echo "üñ•Ô∏è `hostname` reports that Host SSH not responding at {{item}}" | /root/go/bin/noti -g -m -
      with_inventory_hostnames:
        - all
      when: item != ansible_nodename and monitorothers == true and monit == True and hostvars[item].monit == True

    - name: Delete REMOTE SSH Service monit/{{ prefix }}host-{{item}}
      file:
        name: "{{ monitpath }}/{{ hostvars[item].prefix }}host-{{item}}"
        state: absent
      with_inventory_hostnames:
        - all
      when: monit == True and hostvars[item].monit == False or monit == False

    - name: Create monit REMOTE SSH service guard for {{item}}
      copy:
        dest: "{{ monitpath }}/{{ hostvars[item].prefix }}host-{{item}}"
        content: |
          check host {{ hostvars[item].prefix }}{{item}} with address {{item}}
              if failed port 22 protocol ssh for 3 times within 5 cycles then exec "/root/go/bin/noti-{{ prefix }}host-{{item}}.sh"
                repeat every 1 cycles
      with_inventory_hostnames:
        - all
      when: monitorothers == True and item != ansible_nodename and hostvars[item].monit == True and monit == True
      register: cosmos

    - name: Restart monit if required
      service:
        name: monit
        state: restarted
      when: monit and (cosmos.changed or cosmos1.changed or cosmos2.changed or cosmos3.changed or cosmos4.changed)

    - name: Stop monit if unused
      service:
        name: monit
        state: stopped
      when: monit == False
