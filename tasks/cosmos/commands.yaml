---
# Requires: Ansible 2.2 (due to check_mode and timezone)
- hosts: all
  user: root
  tasks:
    - name: Delete cosmos status command
      file:
        dest: "/root/{{ prefix }}query-node-status"
        state: absent
      when: createcommands != True and validator != True

    - name: Create cosmos status command
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}query-node-status"
        content: |
          #!/usr/bin/env bash
          . /root/.{{ prefix }}cosmos.env.sh
          export HOME={{ ansible_user_dir }}
          OUTPUT=$({{ chaincommand }} query staking validators --limit 2000 -o json {{ extrabin }} {% if node != False %}--node {{ node }}{% endif %} | jq -r '.validators[] | [.operator_address, .status, (.tokens|tonumber / pow(10; 6)), .commission.update_time[0:19], .description.moniker] | @csv' | column -t -s','|sort -k 3 -V -r|grep {{ operaddress }})
          echo ${OUTPUT}
          [ "$(echo ${OUTPUT} |awk '{ print $2}'|xargs echo)" == "BOND_STATUS_BONDED" ] && exit 0
          [ "$(echo ${OUTPUT} |awk '{ print $2}'|xargs echo)" == "BOND_STATUS_UNBONDED" ] && exit 1
          exit 0
      when: createcommands == True and validator == True

    - name: Delete cosmos validator prio command
      file:
        dest: "/root/{{ prefix }}query-validator-prio"
        state: absent
      when: createcommands != True and validator != True

    - name: Create cosmos validator prio command
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}query-validator-prio"
        content: |
          #!/usr/bin/env bash
          . /root/.{{ prefix }}cosmos.env.sh
          {{ chaincommand }} q staking validators -o json --limit=1000 {{ extrabin }} {% if node != False %}--node {{ node }}{% endif %} {% if chainid != False %}--chain-id {{ chainid }}{% endif %} | jq '.validators[] | select(.status=="BOND_STATUS_BONDED")' | jq -r '.tokens + " - " + .description.moniker + " - " + .description.identity' | sort -gr | nl|grep "{% if identity != "" %}{{ identity }}{% else %} {{ moniker }} {% endif %}"  $*
      when: createcommands == True and validator == True

    - name: Delete cosmos validator creation command
      file:
        dest: "/root/{{ prefix }}create-validator"
        state: absent
      when: createcommands != True and validator != True

    - name: Create cosmos validator creation
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}create-validator"
        content: |
          #!/usr/bin/env bash
          . /root/.{{ prefix }}cosmos.env.sh
          /root/go/bin/{{ prefix }}safe-balance && {% if passphrase != False %}echo {{passphrase}} | {% endif %} {{ chaincommand }} tx staking create-validator --amount={{ minfee }}{{ token }} --pubkey=$({{ chaincommand }} tendermint show-validator {{ extrabin }}) --moniker="{{ moniker }}" {{ extrabin }} {% if node != False %}--node {{ node }} {% endif %}{% if chainid != False %}--chain-id {{ chainid }}{% endif %} {% if minfee != False %} --fees={{ minfee }}{{ token }}{% else %} {{ gas }} {% endif %} --from {{ from }} --commission-rate="{{ commissionrate}}" --commission-max-rate="{{ commissionmaxrate }}" --commission-max-change-rate="{{ commissionmaxchange }}" --min-self-delegation="{{ minselfdelegation }}" --identity={{ identity }} --security-contact={{ security }} --website={{ website }} --details='{{ details }}' {% if backend != False %}--keyring-backend {{ backend }}{% endif %} {{ extratxbin }} -y $*
      when: createcommands == True and validator == True

    - name: Delete check consensus
      file:
        dest: "/root/{{ prefix }}check-consensus"
        state: absent
      when: createcommands != True and validator != True

    - name: Create check consensus
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}check-consensus"
        content: |
          curl -s localhost:{{rpcport}}/consensus_state | jq '.result.round_state.height_vote_set[0].prevotes_bit_array'
      when: createcommands == True and validator == True

    - name: Delete block height
      file:
        dest: "/root/{{ prefix }}check-height"
        state: absent
      when: createcommands != True

    - name: Create block height
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}check-height"
        content: |
          #!/usr/bin/env bash
          export HOME=/root/
          . /root/.{{ prefix }}cosmos.env.sh

          export NOTI_TELEGRAM_TOKEN={{ telegramtoken }}
          export NOTI_TELEGRAM_CHATID={{ telegramchatid }}

          HEIGHT=$({{ chaincommand }} status 2>&1|jq '.SyncInfo.latest_block_height'|xargs echo)
          HEIGHTTIME=$({{ chaincommand }} status 2>&1|jq '.SyncInfo.latest_block_time'|xargs echo)

          datediff() {
              d1=$(date +%s) # Actual date
              d2=$(date -d "$1" +%s) #date from parameter
              echo $(( (d1 - d2) / 60 ))  # Minutes
              }

          # Variable not stored
          if [ -z "${HEIGHT}" ] || [ "x${HEIGHT}" == 'x' ]; then
            HEIGHT=0
          fi

          DATEDIFF=$(datediff "${HEIGHTTIME}")

          if [ ! -f /root/.{{ prefix }}cosmos.height ]; then
            echo ${HEIGHT} > /root/.{{ prefix }}cosmos.height
          fi
          OLD_HEIGHT=$(cat /root/.{{ prefix }}cosmos.height|xargs echo)

          if [ -z ${OLD_HEIGHT} ] || [ "x${OLD_HEIGHT}" == 'x' ] || [ ${OLD_HEIGHT} == 0 ]; then
              echo "${HEIGHT}" > /root/.{{ prefix }}cosmos.height
              OLD_HEIGHT=${HEIGHT}
          fi

          if [ ${HEIGHT} -gt ${OLD_HEIGHT} ]; then
              # Update new height on file
              echo "${HEIGHT}" > /root/.{{ prefix }}cosmos.height
              echo "New block height: ${HEIGHT}"
              exit 0
          else
               echo "No new block height: ${HEIGHT}"
               exit 0
          fi

          if [ ${DATEDIFF} -gt 3 ]; then
            echo "Cosmos {{ prefix }} block didn't change at `hostname` in more than ${DATEDIFF} minutes"
            echo "🧱 Cosmos {{ prefix }} block didn't change at `hostname` in more than ${DATEDIFF} minutes" | /root/go/bin/noti -g -m -
            exit 1
          else:
            echo "Cosmos {{ prefix }} block changed at `hostname`  ${DATEDIFF} minutes ago"
          fi

      when: createcommands == True

    - name: Delete block height job
      cron:
        name: "block height"
        job: "/root/{{ prefix }}check-height >/dev/null 2>&1"
        state: absent
      when: createcommands != True

    - name: Create block height job
      cron:
        name: "block height"
        job: "/root/{{ prefix }}check-height >/dev/null 2>&1"
        state: absent
      when: createcommands == True

    - name: Delete noti-height
      file:
        dest: "/root/go/bin/noti-{{ prefix }}height.sh"
        state: absent
      when: createcommands != True or monit != True

    - name: Create noti-height.sh with variables
      copy:
        dest: "/root/go/bin/noti-{{ prefix }}height.sh"
        mode: 0755
        content: |
          #!/usr/bin/env bash
          export NOTI_TELEGRAM_TOKEN={{ telegramtoken }}
          export NOTI_TELEGRAM_CHATID={{ telegramchatid }}
          echo "🧱 Cosmos {{ prefix }} block didn't change at `hostname`" | /root/go/bin/noti -g -m -
      when: createcommands == True and monit == True

    - name: Delete monit noti-height monitoring
      file:
        dest: "{{ monitpath }}/{{ prefix }}cosmos-blockheight"
        state: absent
      when: createcommands != True or monit != True
      register: cosmos1

    - name: Create monit cosmos block height monitoring
      copy:
        dest: "{{ monitpath }}/{{ prefix }}cosmos-blockheight"
        content: |
          check program {{ prefix}}cosmos-blockheight with path /root/{{ prefix }}check-height
              if status != 0 for 3 times within 5 cycles then exec "/root/go/bin/noti-{{ prefix }}height.sh"

      register: cosmos1
      when: createcommands == True and monit == True

    - name: Delete check-validator-prio.sh with variables
      file:
        dest: "/root/go/bin/{{ prefix }}check-validator-prio"
        state: absent
      when: createcommands != True or validator != True

    - name: Create validator prio
      copy:
        mode: 0700
        dest: "/root/go/bin/{{ prefix }}check-validator-prio"
        content: |
          #!/usr/bin/env bash
          export HOME=/root/
          . /root/.{{ prefix }}cosmos.env.sh

          export NOTI_TELEGRAM_TOKEN="{{ telegramtoken }}"
          export NOTI_TELEGRAM_CHATID="{{ telegramchatid }}"

          PRIO=$(/root/{{ prefix }}query-validator-prio|awk '{print $1}')

          if [ -z ${PRIO} ] || [ "${PRIO}" == "0" ] || [ "x${PRIO}" == 'x' ]; then
            PRIO=0
          fi

          if [ ! -f /root/.{{ prefix }}cosmos.prio ]; then
            # Store actual priority if there was non existing one
            echo ${PRIO} > /root/.{{ prefix }}cosmos.prio
          fi

          # Read previous priority
          PREVIOUS="$(cat /root/.{{ prefix }}cosmos.prio |   xargs echo)"

          if [ -z "${PREVIOUS}" ] || [ "${PREVIOUS}" == "0" ] || [ "x${PREVIOUS}" == 'x' ] ; then
            echo ${PREVIOUS} > /root/.{{ prefix }}cosmos.prio
            PREVIOUS=${PRIO}
          fi

          if [ ${PRIO} -le ${PREVIOUS} ]; then
            # Update new PRIO on file
            echo "${PRIO}" > /root/.{{ prefix }}cosmos.prio
            echo "New PRIO: ${PRIO}"
          else
            # Reverse logic, PRIO values is higher, so we've less priority (later in the queue)
            echo "Lower prio for validator PRIO: ${PRIO} (OLD: ${PREVIOUS})"
            echo "${PRIO}" > /root/.{{ prefix }}cosmos.prio
            if [ ${PRIO} -le 98 ]; then
              # New Prio is not 98 or more, do not complain
              echo
            else
              echo "💯 Cosmos priority lowered at `hostname` -  ${PRIO} (${PREVIOUS})" | /root/go/bin/noti -g -m -
            fi
          fi
      when: createcommands == True and validator == True

    - name: Delete validator check-validator-prio job
      cron:
        name: "Validator check-validator-prio"
        job: "/root/go/bin/{{ prefix }}check-validator-prio >/dev/null 2>&1"
        state: absent
      when: createcommands != True or validator != True

    - name: Create validator check-validator-prio job
      cron:
        name: "Validator check-validator-prio"
        job: "/root/go/bin/{{ prefix }}check-validator-prio >/dev/null 2>&1"
        special_time: "hourly"
      when: createcommands == True and validator == True

    - name: Delete check-proposal
      file:
        dest: "/root/{{ prefix }}check-proposal"
        state: absent
      when: createcommands != True or validator != True

    - name: Create check vote proposal
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}check-proposal"
        content: |
          #!/usr/bin/env bash
          export HOME=/root/
          . /root/.{{ prefix }}cosmos.env.sh

          export NOTI_TELEGRAM_TOKEN={{ telegramtoken }}
          export NOTI_TELEGRAM_CHATID={{ telegramchatid }}

          PROPOSAL=$({{ chaincommand }} q gov proposals {% if node != False %}--node {{ node }}{% endif %} -o json 2>&1 | jq .proposals[].proposal_id|xargs echo|tr " " "\n"|sort -V|tail -1)
          if [ ! -f /root/.{{ prefix }}cosmos.proposal ]; then
            echo $PROPOSAL > /root/.{{ prefix }}cosmos.proposal
          fi
          OLD_PROPOSAL=$(cat /root/.{{ prefix }}cosmos.proposal|xargs echo)
          if [ -z ${OLD_PROPOSAL} ]; then
              echo "${PROPOSAL}" > /root/.{{ prefix }}cosmos.proposal
              OLD_PROPOSAL=${PROPOSAL}
          fi
          if [ ${PROPOSAL} -gt ${OLD_PROPOSAL} ]; then
              # Update new PROPOSAL on file
              echo "${PROPOSAL}" > /root/.{{ prefix }}cosmos.proposal
              echo "🗳️ New PROPOSAL: ${PROPOSAL} - ${HOSTNAME}" | /root/go/bin/noti -g -m -
              exit 1
          else
               echo "No new PROPOSAL: ${PROPOSAL}"
               exit 0
           fi
          fi
      when: createcommands == True and validator == True

    - name: Delete Check proposal job
      cron:
        name: "Check Proposal"
        job: "/root/{{ prefix }}check-proposal >/dev/null 2>&1"
        state: absent
      when: createcommands != True or validator != True

    - name: Create Check proposal job
      cron:
        name: "Check Proposal"
        job: "/root/{{ prefix }}check-proposal >/dev/null 2>&1"
        special_time: "hourly"
      when: createcommands == True and validator == True

    - name: Delete monit cosmos vote-proposal
      file:
        dest: "/root/{{ prefix }}vote-proposal"
        state: absent
      when: createcommands != True or validator != True

    - name: Create monit cosmos vote-proposal
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}vote-proposal"
        content: |
          #!/usr/bin/env bash
          export HOME=/root/
          . /root/.{{ prefix }}cosmos.env.sh
          {% if passphrase != False %}echo {{passphrase}} | {% endif %} {{ chaincommand }} tx gov vote ${1} ${2} --from {{ from }} {% if backend != False %}--keyring-backend {{ backend }}{% endif %} {{ extrabin }} {% if node != False %}--node {{ node }}{% endif %} {% if minfee != False %} --fees={{ minfee }}{{ token }}{% else %} {{ gas }} {% endif %} {% if chainid != False %}--chain-id {{ chainid }}{% endif %}  -y
      when: createcommands == True and validator == True

    - name: Delete monitor-balance
      file:
        dest: "/root/go/bin/{{ prefix }}monitor-balance"
        state: absent
      when: createcommands != True or validator != True

    - name: Create cosmos balance monitor command
      copy:
        mode: 0700
        dest: "/root/go/bin/{{ prefix }}monitor-balance"
        content: |
          #!/usr/bin/env bash
          SAFETY={{ safety }}
          MULTIPLIER={{ multiplier }}
          BACKEND='{{ backend }}'
          FROM='{{ from }}'
          EXTRABIN='{{ extrabin }}'
          CHAINID='{{ chainid }}'
          CHAINCOMMAND="{{ chaincommand }}"
          TOKEN='{{ token }}'
          MINFEE='{{ minfee }}'

          export NOTI_TELEGRAM_TOKEN={{ telegramtoken }}
          export NOTI_TELEGRAM_CHATID={{ telegramchatid }}

          WALLETS="{{monitorwallet | join(' ') }}"
          . /root/.{{ prefix }}cosmos.env.sh

          error=0
          for NODEWALLET in ${WALLETS} ; do
            BALANCE=$(${CHAINCOMMAND} query bank balances ${NODEWALLET} ${EXTRABIN} {% if chainid != False %}--chain-id ${CHAINID}{% endif %}  {% if node != False %}--node {{ node }}{% endif %} |grep ${TOKEN} -B1 | grep amount|cut -d ":" -f2-|xargs echo|cut -d "." -f 1)
            if [ ${BALANCE} -lt ${SAFETY} ]; then
              echo "💰 Cosmos {{ prefix }} balance low on ${NODEWALLET} - ${BALANCE} ${TOKEN} - ${HOSTNAME}" | /root/go/bin/noti -g -m -
              error=1
            fi
          done
      when: createcommands == True and monitorwallet != []

    - name: Remove walletmonitor job
      cron:
        name: "walletmonitor"
        job: "/root/go/bin/{{ prefix }}monitor-balance >/dev/null 2>&1"
        state: absent
      when: createcommands == False or monitorwallet == []

    - name: Create walletmonitor job
      cron:
        name: "walletmonitor"
        special_time: "hourly"
        job: "/root/go/bin/{{ prefix }}monitor-balance >/dev/null 2>&1"
      when: createcommands == True and monitorwallet != []

    - name: Restart monit if required
      service:
        name: monit
        state: restarted
      when: monit and cosmos1.changed

    - name: Create cosmos whenupgrade
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}whenupgrade"
        content: |
          #!/usr/bin/env bash
          whenupgrade(){   local cheight=$(curl -s http://localhost:26657/status | jq -r '.result.sync_info.latest_block_height');   local uheight=$1;   local blktime=6;   local secs="$(echo "scale=0; (($uheight - $cheight) * $blktime)/1" | bc)";   printf "Chain upgrade in %dh %dm\n" $((secs / (60 * 60))) $(((secs % (60*60))/60)); }
          if [[ ! -z $1 ]]; then
              whenupgrade $1
          else
            echo "Provide block height for upgrade: $0 58400"
          fi
      when: createcommands == True

    - name: Create cosmos havevoted
      copy:
        mode: 0700
        dest: "/root/{{ prefix }}havevoted"
        content: |
          #!/usr/bin/env bash
          curl -s http://localhost:26657/dump_consensus_state | jq '.result.round_state.votes[0].prevotes' | grep $(curl -s http://localhost:26657/status | jq -r '.result.validator_info.address[:12]')
      when: createcommands == True
